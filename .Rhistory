}
sk_artist_id <- artist_name_to_songkick_id("Eminem")
#songkick_artist_id_to_songkick_event_ids <- function(sk_artist_id) {
library(jsonlite)
# Build query URL and execute
sk_api_key <- "OdCeFTr8qFUSwUVt"
sk_query_url <- paste("https://api.songkick.com/api/3.0/artists/",
sk_artist_id, "/gigography.json?apikey=", sk_api_key, sep="")
sk_json <- fromJSON(sk_query_url)
# extract Event IDs
eventIDs <- as.character(sk_json[["resultsPage"]][["results"]][["event"]][["venue"]][["id"]])
totalPages <- ceiling(sk_json[["resultsPage"]][['totalEntries']] / sk_json[["resultsPage"]][['perPage']])
# repeat on further pages (if any)
if (totalPages > 1) {
pageNums <- 2:totalPages
for (pageNum in pageNums) {
sk_query_url <- paste(sk_query_url,"&page=",pageNum,sep="")
sk_json <- fromJSON(sk_query_url)
eventIDs <- append(eventIDs, as.character(sk_json[["resultsPage"]][["results"]][["event"]][["venue"]][["id"]]))
}
}
# extract Event IDs
eventIDs <- as.character(sk_json[["resultsPage"]][["results"]][["event"]][["id"]])
sk_query_url <- paste("https://api.songkick.com/api/3.0/artists/",
sk_artist_id, "/gigography.json?apikey=", sk_api_key, sep="")
sk_json <- fromJSON(sk_query_url)
# extract Event IDs
eventIDs <- as.character(sk_json[["resultsPage"]][["results"]][["event"]][["id"]])
totalPages <- ceiling(sk_json[["resultsPage"]][['totalEntries']] / sk_json[["resultsPage"]][['perPage']])
#songkick_artist_id_to_songkick_event_ids <- function(sk_artist_id) {
library(jsonlite)
# Build query URL and execute
sk_api_key <- "OdCeFTr8qFUSwUVt"
sk_query_url <- paste("https://api.songkick.com/api/3.0/artists/",
sk_artist_id, "/gigography.json?apikey=", sk_api_key, sep="")
sk_json <- fromJSON(sk_query_url)
# extract Event IDs
eventIDs <- as.character(sk_json[["resultsPage"]][["results"]][["event"]][["id"]])
# Build query URL and execute
sk_api_key <- "OdCeFTr8qFUSwUVt"
sk_query_url <- paste("https://api.songkick.com/api/3.0/artists/", sk_artist_id,
"/gigography.json?apikey=", sk_api_key, sep="")
sk_json <- fromJSON(sk_query_url)
# extract Event IDs
eventIDs <- as.character(sk_json[["resultsPage"]][["results"]][["event"]][["id"]])
totalPages <- ceiling(sk_json[["resultsPage"]][['totalEntries']] / sk_json[["resultsPage"]][['perPage']])
# repeat on further pages (if any)
if (totalPages > 1) {
pageNums <- 2:totalPages
for (pageNum in pageNums) {
sk_query_url <- paste(sk_query_url,"&page=",pageNum,sep="")
sk_json <- fromJSON(sk_query_url)
eventIDs <- append(eventIDs, as.character(sk_json[["resultsPage"]][["results"]][["event"]][["id"]]))
}
}
return (eventIDs)
sk_artist_id <- artist_name_to_songkick_id("Eminem")
#songkick_artist_id_to_songkick_event_ids <- function(sk_artist_id) {
library(jsonlite)
# Build query URL and execute
sk_api_key <- "OdCeFTr8qFUSwUVt"
sk_query_url <- paste("https://api.songkick.com/api/3.0/artists/", sk_artist_id,
"/gigography.json?apikey=", sk_api_key, sep="")
sk_json <- fromJSON(sk_query_url)
# extract Event IDs
eventIDs <- as.character(sk_json[["resultsPage"]][["results"]][["event"]][["id"]])
totalPages <- ceiling(sk_json[["resultsPage"]][['totalEntries']] / sk_json[["resultsPage"]][['perPage']])
# repeat on further pages (if any)
if (totalPages > 1) {
pageNums <- 2:totalPages
for (pageNum in pageNums) {
sk_query_url <- paste(sk_query_url,"&page=",pageNum,sep="")
sk_json <- fromJSON(sk_query_url)
eventIDs <- append(eventIDs, as.character(sk_json[["resultsPage"]][["results"]][["event"]][["id"]]))
}
}
songkick_artist_id_to_songkick_event_ids("Eminem")
songkick_artist_id_to_songkick_event_ids <- function(sk_artist_id) {
library(jsonlite)
# Build query URL and execute
sk_api_key <- "OdCeFTr8qFUSwUVt"
sk_query_url <- paste("https://api.songkick.com/api/3.0/artists/", sk_artist_id,
"/gigography.json?apikey=", sk_api_key, sep="")
sk_json <- fromJSON(sk_query_url)
# extract Event IDs
eventIDs <- as.character(sk_json[["resultsPage"]][["results"]][["event"]][["id"]])
totalPages <- ceiling(sk_json[["resultsPage"]][['totalEntries']] / sk_json[["resultsPage"]][['perPage']])
# repeat on further pages (if any)
if (totalPages > 1) {
pageNums <- 2:totalPages
for (pageNum in pageNums) {
sk_query_url <- paste(sk_query_url,"&page=",pageNum,sep="")
sk_json <- fromJSON(sk_query_url)
eventIDs <- append(eventIDs, as.character(sk_json[["resultsPage"]][["results"]][["event"]][["id"]]))
}
}
return (eventIDs)
}
songkick_artist_id_to_songkick_event_ids("Eminem")
eventIDs <- songkick_artist_id_to_songkick_event_ids("Eminem")
eventIDs <- songkick_artist_id_to_songkick_event_data(artist_name_to_songkick_id("Eminem"))
songkick_artist_id_to_songkick_event_ids <- function(sk_artist_id) {
library(jsonlite)
# Build query URL and execute
sk_api_key <- "OdCeFTr8qFUSwUVt"
sk_query_url <- paste("https://api.songkick.com/api/3.0/artists/", sk_artist_id,
"/gigography.json?apikey=", sk_api_key, sep="")
sk_json <- fromJSON(sk_query_url)
# extract Event IDs
eventIDs <- as.character(sk_json[["resultsPage"]][["results"]][["event"]][["id"]])
totalPages <- ceiling(sk_json[["resultsPage"]][['totalEntries']] / sk_json[["resultsPage"]][['perPage']])
# repeat on further pages (if any)
if (totalPages > 1) {
pageNums <- 2:totalPages
for (pageNum in pageNums) {
sk_query_url <- paste(sk_query_url,"&page=",pageNum,sep="")
sk_json <- fromJSON(sk_query_url)
eventIDs <- append(eventIDs, as.character(sk_json[["resultsPage"]][["results"]][["event"]][["id"]]))
}
}
return (eventIDs)
}
eventIDs <- songkick_artist_id_to_songkick_event_data(artist_name_to_songkick_id("Eminem"))
songkick_artist_id_to_songkick_event_ids <- function(sk_artist_id) {
library(jsonlite)
# Build query URL and execute
sk_api_key <- "OdCeFTr8qFUSwUVt"
sk_query_url <- paste("https://api.songkick.com/api/3.0/artists/", sk_artist_id,
"/gigography.json?apikey=", sk_api_key, sep="")
sk_json <- fromJSON(sk_query_url)
# extract Event IDs
eventIDs <- as.character(sk_json[["resultsPage"]][["results"]][["event"]][["id"]])
totalPages <- ceiling(sk_json[["resultsPage"]][['totalEntries']] / sk_json[["resultsPage"]][['perPage']])
# repeat on further pages (if any)
if (totalPages > 1) {
pageNums <- 2:totalPages
for (pageNum in pageNums) {
sk_query_url <- paste(sk_query_url,"&page=",pageNum,sep="")
sk_json <- fromJSON(sk_query_url)
eventIDs <- append(eventIDs, as.character(sk_json[["resultsPage"]][["results"]][["event"]][["id"]]))
}
}
return (eventIDs)
}
eventIDs <- songkick_artist_id_to_songkick_event_data(artist_name_to_songkick_id("Eminem"))
songkick_artist_id_to__event_data <- function(sk_artist_id) {
library(jsonlite)
# Build query URL and execute
sk_api_key <- "OdCeFTr8qFUSwUVt"
sk_query_url <- paste("https://api.songkick.com/api/3.0/artists/", sk_artist_id,
"/gigography.json?apikey=", sk_api_key, sep="")
sk_json <- fromJSON(sk_query_url)
# extract Event IDs
eventIDs <- as.character(sk_json[["resultsPage"]][["results"]][["event"]][["id"]])
totalPages <- ceiling(sk_json[["resultsPage"]][['totalEntries']] / sk_json[["resultsPage"]][['perPage']])
# repeat on further pages (if any)
if (totalPages > 1) {
pageNums <- 2:totalPages
for (pageNum in pageNums) {
sk_query_url <- paste(sk_query_url,"&page=",pageNum,sep="")
sk_json <- fromJSON(sk_query_url)
eventIDs <- append(eventIDs, as.character(sk_json[["resultsPage"]][["results"]][["event"]][["id"]]))
}
}
return (eventIDs)
}
songkick_artist_id_to_event_data <- function(sk_artist_id) {
library(jsonlite)
# Build query URL and execute
sk_api_key <- "OdCeFTr8qFUSwUVt"
sk_query_url <- paste("https://api.songkick.com/api/3.0/artists/", sk_artist_id,
"/gigography.json?apikey=", sk_api_key, sep="")
sk_json <- fromJSON(sk_query_url)
# extract Event IDs
eventIDs <- as.character(sk_json[["resultsPage"]][["results"]][["event"]][["id"]])
totalPages <- ceiling(sk_json[["resultsPage"]][['totalEntries']] / sk_json[["resultsPage"]][['perPage']])
# repeat on further pages (if any)
if (totalPages > 1) {
pageNums <- 2:totalPages
for (pageNum in pageNums) {
sk_query_url <- paste(sk_query_url,"&page=",pageNum,sep="")
sk_json <- fromJSON(sk_query_url)
eventIDs <- append(eventIDs, as.character(sk_json[["resultsPage"]][["results"]][["event"]][["id"]]))
}
}
return (eventIDs)
}
eventIDs <- songkick_artist_id_to_event_data(artist_name_to_songkick_id("Eminem"))
eventIDs <- songkick_artist_id_to_event_data(artist_name_to_songkick_id("Bruce Springsteen"))
songkick_artist_id_to_event_data <- function(sk_artist_id) {
library(jsonlite)
# Build query URL and execute
sk_api_key <- "OdCeFTr8qFUSwUVt"
sk_query_url <- paste("https://api.songkick.com/api/3.0/artists/", sk_artist_id,
"/gigography.json?apikey=", sk_api_key, sep="")
sk_json <- fromJSON(sk_query_url)
# extract Event IDs
eventIDs <- as.character(sk_json[["resultsPage"]][["results"]][["event"]][["id"]])
eventCities <- sk_json[["resultsPage"]][["results"]][["event"]][["location"]][["city"]]
totalPages <- ceiling(sk_json[["resultsPage"]][['totalEntries']] / sk_json[["resultsPage"]][['perPage']])
# repeat on further pages (if any)
if (totalPages > 1) {
pageNums <- 2:totalPages
for (pageNum in pageNums) {
sk_query_url <- paste(sk_query_url,"&page=",pageNum,sep="")
sk_json <- fromJSON(sk_query_url)
eventIDs <- append(eventIDs, as.character(sk_json[["resultsPage"]][["results"]][["event"]][["id"]]))
eventCities <- append(eventCities, sk_json[["resultsPage"]][["results"]][["event"]][["location"]][["city"]])
}
}
return (eventCities)
}
eventIDs <- songkick_artist_id_to_event_data(artist_name_to_songkick_id("Kate Bush"))
eventIDs <- songkick_artist_id_to_event_data(artist_name_to_songkick_id("Kate Bush"))
#songkick_artist_id_to_event_data <- function(sk_artist_id) {
library(jsonlite)
# Build query URL and execute
sk_api_key <- "OdCeFTr8qFUSwUVt"
sk_query_url <- paste("https://api.songkick.com/api/3.0/artists/", sk_artist_id,
"/gigography.json?apikey=", sk_api_key, sep="")
sk_json <- fromJSON(sk_query_url)
# extract Event IDs
eventIDs <- as.character(sk_json[["resultsPage"]][["results"]][["event"]][["id"]])
eventCities <- sk_json[["resultsPage"]][["results"]][["event"]][["location"]][["city"]]
totalPages <- ceiling(sk_json[["resultsPage"]][['totalEntries']] / sk_json[["resultsPage"]][['perPage']])
totalPages <- ceiling(sk_json[["resultsPage"]][['totalEntries']] / sk_json[["resultsPage"]][['perPage']])
# repeat on further pages (if any)
if (totalPages > 1) {
pageNums <- 2:totalPages
for (pageNum in pageNums) {
sk_query_url <- paste(sk_query_url,"&page=",pageNum,sep="")
sk_json <- fromJSON(sk_query_url)
eventIDs <- append(eventIDs, as.character(sk_json[["resultsPage"]][["results"]][["event"]][["id"]]))
eventCities <- append(eventCities, sk_json[["resultsPage"]][["results"]][["event"]][["location"]][["city"]])
}
}
cbind(eventIDs, eventCities, stringsAsFactors=FALSE)
cbind(eventIDs, eventCities)
eventIDs <- songkick_artist_id_to_event_data(artist_name_to_songkick_id("Kate Bush"))
eventIDs <- songkick_artist_id_to_event_data(artist_name_to_songkick_id("Kate Bush"))
songkick_artist_id_to_event_data <- function(sk_artist_id) {
library(jsonlite)
# Build query URL and execute
sk_api_key <- "OdCeFTr8qFUSwUVt"
sk_query_url <- paste("https://api.songkick.com/api/3.0/artists/", sk_artist_id,
"/gigography.json?apikey=", sk_api_key, sep="")
sk_json <- fromJSON(sk_query_url)
# extract Event IDs
eventIDs <- as.character(sk_json[["resultsPage"]][["results"]][["event"]][["id"]])
eventCities <- sk_json[["resultsPage"]][["results"]][["event"]][["location"]][["city"]]
totalPages <- ceiling(sk_json[["resultsPage"]][['totalEntries']] / sk_json[["resultsPage"]][['perPage']])
# repeat on further pages (if any)
if (totalPages > 1) {
pageNums <- 2:totalPages
for (pageNum in pageNums) {
sk_query_url <- paste(sk_query_url,"&page=",pageNum,sep="")
sk_json <- fromJSON(sk_query_url)
eventIDs <- append(eventIDs, as.character(sk_json[["resultsPage"]][["results"]][["event"]][["id"]]))
eventCities <- append(eventCities, sk_json[["resultsPage"]][["results"]][["event"]][["location"]][["city"]])
}
}
return (cbind(eventIDs, eventCities))
}
eventIDs <- songkick_artist_id_to_event_data(artist_name_to_songkick_id("Kate Bush"))
View(eventIDs)
songkick_artist_id_to_event_data <- function(sk_artist_id) {
library(jsonlite)
# Build query URL and execute
sk_api_key <- "OdCeFTr8qFUSwUVt"
sk_query_url <- paste("https://api.songkick.com/api/3.0/artists/", sk_artist_id,
"/gigography.json?apikey=", sk_api_key, sep="")
sk_json <- fromJSON(sk_query_url)
# extract Event IDs
eventIDs <- as.character(sk_json[["resultsPage"]][["results"]][["event"]][["id"]])
eventCities <- sk_json[["resultsPage"]][["results"]][["event"]][["location"]][["city"]]
eventLngs <- as.double(sk_json[["resultsPage"]][["results"]][["event"]][["location"]][["lng"]])
eventLats <- as.double(sk_json[["resultsPage"]][["results"]][["event"]][["location"]][["lat"]])
totalPages <- ceiling(sk_json[["resultsPage"]][['totalEntries']] / sk_json[["resultsPage"]][['perPage']])
# repeat on further pages (if any)
if (totalPages > 1) {
pageNums <- 2:totalPages
for (pageNum in pageNums) {
sk_query_url <- paste(sk_query_url,"&page=",pageNum,sep="")
sk_json <- fromJSON(sk_query_url)
eventIDs <- append(eventIDs, as.character(sk_json[["resultsPage"]][["results"]][["event"]][["id"]]))
eventCities <- append(eventCities, sk_json[["resultsPage"]][["results"]][["event"]][["location"]][["city"]])
eventLngs <- append(eventLngs, as.double(sk_json[["resultsPage"]][["results"]][["event"]][["location"]][["lng"]]))
eventLats <- append(eventLats, as.double(sk_json[["resultsPage"]][["results"]][["event"]][["location"]][["lat"]]))
}
}
return (cbind(eventIDs, eventCities, eventLngs, eventLats))
}
eventIDs <- songkick_artist_id_to_event_data(artist_name_to_songkick_id("Kate Bush"))
View(eventIDs)
# extract Event IDs
eventIDs <- as.character(sk_json[["resultsPage"]][["results"]][["event"]][["id"]])
eventDatea <- sk_json[["resultsPage"]][["results"]][["event"]][["start"]][["date"]]
songkick_artist_id_to_event_data <- function(sk_artist_id) {
library(jsonlite)
# Build query URL and execute
sk_api_key <- "OdCeFTr8qFUSwUVt"
sk_query_url <- paste("https://api.songkick.com/api/3.0/artists/", sk_artist_id,
"/gigography.json?apikey=", sk_api_key, sep="")
sk_json <- fromJSON(sk_query_url)
# extract Event IDs
eventIDs <- as.character(sk_json[["resultsPage"]][["results"]][["event"]][["id"]])
eventDates <- sk_json[["resultsPage"]][["results"]][["event"]][["start"]][["date"]]
eventCities <- sk_json[["resultsPage"]][["results"]][["event"]][["location"]][["city"]]
eventLngs <- as.double(sk_json[["resultsPage"]][["results"]][["event"]][["location"]][["lng"]])
eventLats <- as.double(sk_json[["resultsPage"]][["results"]][["event"]][["location"]][["lat"]])
# repeat on further pages (if any)
totalPages <- ceiling(sk_json[["resultsPage"]][['totalEntries']] / sk_json[["resultsPage"]][['perPage']])
if (totalPages > 1) {
pageNums <- 2:totalPages
for (pageNum in pageNums) {
sk_query_url <- paste(sk_query_url,"&page=",pageNum,sep="")
sk_json <- fromJSON(sk_query_url)
eventIDs <- append(eventIDs, as.character(sk_json[["resultsPage"]][["results"]][["event"]][["id"]]))
eventDates <- append(eventDates, sk_json[["resultsPage"]][["results"]][["event"]][["start"]][["date"]])
eventCities <- append(eventCities, sk_json[["resultsPage"]][["results"]][["event"]][["location"]][["city"]])
eventLngs <- append(eventLngs, as.double(sk_json[["resultsPage"]][["results"]][["event"]][["location"]][["lng"]]))
eventLats <- append(eventLats, as.double(sk_json[["resultsPage"]][["results"]][["event"]][["location"]][["lat"]]))
}
}
return (cbind(eventIDs, eventDates, eventCities, eventLngs, eventLats))
}
eventIDs <- songkick_artist_id_to_event_data(artist_name_to_songkick_id("Kate Bush"))
View(eventIDs)
# import spotify dataset
spotify <- read.csv("Excel/spotify.csv")
# isolate last 6 months (last 26 weeks of 200 chart positions)
spotify_last6mo <- tail(spotify, 26*200)
# aggregate total plays per artists
artist_plays <- aggregate(spotify_last6mo$Plays, by=list(Artist=spotify_last6mo$Artist), FUN=sum)
# sort list and keep top 20
top_20 <- head(artist_plays[order(artist_plays$x, decreasing=TRUE),], 20)
rownames(top_20) <- 1:20
colnames(top_20) <- c("Artist","Plays last 6mo")
# lapply to get songkick IDs (RUN FUNCTIONS IN functions.R)
songkick_ids <- sapply(top_20$Artist, artist_name_to_songkick_id)
# lapply to get songkick IDs (RUN FUNCTIONS IN functions.R)
top_20$Artist[1]
artist_name_to_songkick_id(top_20$Artist[1])
# sort list and keep top 20
top_20 <- head(artist_plays[order(artist_plays$x, decreasing=TRUE),], 20)
rownames(top_20) <- 1:20
colnames(top_20) <- c("Artist","Plays last 6mo")
# lapply to get songkick IDs (RUN FUNCTIONS IN functions.R)
top_20$Artist[1]
View(top_20)
artist_name_to_songkick_id(top_20$Artist[[1]])
artist_name_to_songkick_id("Ariana Grande")
artist_name_to_songkick_id(as.character(top_20$Artist[1]))
songkick_ids <- sapply(as.character(top_20$Artist), artist_name_to_songkick_id)
top_20$Songkick <- songkick_ids
View(top_20)
top_20$'Songkick ID' <- songkick_ids
View(top_20)
View(spotify)
spotify_2018 <- spotify[left(Week, 4) == "2018"]
spotify_2018 <- spotify[substr(Week, 1, 4) == "2018"]
spotify_2018 <- spotify[substr(spotify$Week, 1, 4) == "2018"]
View(spotify)
typeof(spotify)
spotify_2018 <- spotify[spotify$Week == "a"]
View(spotify_2018)
spotify_2018 <- spotify[spotify$Week == "a", ]
View(spotify_2018)
spotify_2018 <- spotify[substr(spotify$Week,1,4) == "aaaa", ]
spotify_2018 <- spotify[substr(spotify$Week,1,4) == "2018", ]
View(spotify_2018)
# import spotify dataset
spotify <- read.csv("Excel/spotify.csv")
# isolate last 6 months (last 26 weeks of 200 chart positions)
spotify_last6mo <- tail(spotify, 26*200)
spotify_2018 <- spotify[substr(spotify$Week,1,4) == "2018", ]
spotify_data <- spotify_2018
# aggregate total plays per artists
artist_plays <- aggregate(spotify_data$Plays, by=list(Artist=spotify_data$Artist), FUN=sum)
# sort list and keep top 20
top_20 <- head(artist_plays[order(artist_plays$x, decreasing=TRUE),], 20)
rownames(top_20) <- 1:20
colnames(top_20) <- c("Artist","Plays last 6mo")
colnames(top_20) <- c("Artist","Total Plays")
# lapply to get songkick IDs (RUN FUNCTIONS IN functions.R)
top_20$Artist[1]
# lapply to get songkick IDs (RUN FUNCTIONS IN functions.R)
artist_name_to_songkick_id(as.character(top_20$Artist[1]))
# sapply to get songkick IDs (RUN FUNCTIONS IN functions.R)
top_20$'Songkick ID' <- sapply(as.character(top_20$Artist), artist_name_to_songkick_id)
View(top_20)
this <- lapply(as.character(top_20$'Songkick ID'), songkick_artist_id_to_event_data)
View(this)
this[1]
artist_name_to_songkick_id <- function(artist_name){
library(jsonlite)
songkick_api_key <- "OdCeFTr8qFUSwUVt"
songkick_query_url <- paste ("https://api.songkick.com/api/3.0/search/artists.json?apikey=", songkick_api_key,
"&query=", URLencode(artist_name), sep="")
sk_json <- fromJSON(songkick_query_url)
# Pause to avoid 503 error on loop
Sys.sleep(0.5)
result <- as.character(sk_json[['resultsPage']][['results']][['artist']][['id']][1])
return(result)
}
songkick_artist_id_to_event_data <- function(sk_artist_id) {
library(jsonlite)
# Build query URL and execute
sk_api_key <- "OdCeFTr8qFUSwUVt"
sk_query_url <- paste("https://api.songkick.com/api/3.0/artists/", sk_artist_id,
"/gigography.json?apikey=", sk_api_key, sep="")
sk_json <- fromJSON(sk_query_url)
# extract Event IDs
eventIDs <- as.character(sk_json[["resultsPage"]][["results"]][["event"]][["id"]])
eventDates <- sk_json[["resultsPage"]][["results"]][["event"]][["start"]][["date"]]
eventCities <- sk_json[["resultsPage"]][["results"]][["event"]][["location"]][["city"]]
eventLngs <- as.double(sk_json[["resultsPage"]][["results"]][["event"]][["location"]][["lng"]])
eventLats <- as.double(sk_json[["resultsPage"]][["results"]][["event"]][["location"]][["lat"]])
# repeat on further pages (if any)
totalPages <- ceiling(sk_json[["resultsPage"]][['totalEntries']] / sk_json[["resultsPage"]][['perPage']])
if (totalPages > 1) {
pageNums <- 2:totalPages
for (pageNum in pageNums) {
sk_query_url <- paste(sk_query_url,"&page=",pageNum,sep="")
sk_json <- fromJSON(sk_query_url)
eventIDs <- append(eventIDs, as.character(sk_json[["resultsPage"]][["results"]][["event"]][["id"]]))
eventDates <- append(eventDates, sk_json[["resultsPage"]][["results"]][["event"]][["start"]][["date"]])
eventCities <- append(eventCities, sk_json[["resultsPage"]][["results"]][["event"]][["location"]][["city"]])
eventLngs <- append(eventLngs, as.double(sk_json[["resultsPage"]][["results"]][["event"]][["location"]][["lng"]]))
eventLats <- append(eventLats, as.double(sk_json[["resultsPage"]][["results"]][["event"]][["location"]][["lat"]]))
}
}
return (cbind(eventIDs, eventDates, eventCities, eventLngs, eventLats))
}
# import spotify dataset
spotify <- read.csv("Excel/spotify.csv")
# isolate last 6 months (last 26 weeks of 200 chart positions)
#spotify_last6mo <- tail(spotify, 26*200)
spotify_2018 <- spotify[substr(spotify$Week,1,4) == "2018", ]
spotify_data <- spotify_2018
# aggregate total plays per artists
artist_plays <- aggregate(spotify_data$Plays, by=list(Artist=spotify_data$Artist), FUN=sum)
# sort list and keep top 20
top_20 <- head(artist_plays[order(artist_plays$x, decreasing=TRUE),], 20)
rownames(top_20) <- 1:20
colnames(top_20) <- c("Artist","Total Plays")
# sapply to get songkick IDs (RUN FUNCTIONS IN functions.R)
top_20$'Songkick ID' <- sapply(as.character(top_20$Artist), artist_name_to_songkick_id)
write.csv(top_20, "R/artist_data.csv")
top_20_artists_event_data <- lapply(as.character(top_20$'Songkick ID'), songkick_artist_id_to_event_data)
write.csv(top_20_artists_event_data[1], "R/top_artist_events.csv")
this <- top_20_artists_event_data[1]
this <- append(this, top_20_artists_event_data[2])
View(this)
this <- unlist(top_20_artists_event_data[1])
this <- matrix(unlist(top_20_artists_event_data, nrow=length(top_20_artists_event_data), byrow=T))
this <- matrix(unlist(top_20_artists_event_data), nrow=length(top_20_artists_event_data), byrow=T))
this <- data.frame(matrix(unlist(top_20_artists_event_data), nrow=length(top_20_artists_event_data), byrow=T))
this <- unlist(top_20_artists_event_data)
this <- matrix(unlist(top_20_artists_event_data), ncol=5)
View(this)
songkick_artist_id_to_event_data <- function(sk_artist_id) {
library(jsonlite)
# Build query URL and execute
sk_api_key <- "OdCeFTr8qFUSwUVt"
sk_query_url <- paste("https://api.songkick.com/api/3.0/artists/", sk_artist_id,
"/gigography.json?apikey=", sk_api_key, sep="")
sk_json <- fromJSON(sk_query_url)
# extract Event IDs
eventIDs <- as.character(sk_json[["resultsPage"]][["results"]][["event"]][["id"]])
eventDates <- sk_json[["resultsPage"]][["results"]][["event"]][["start"]][["date"]]
eventCities <- sk_json[["resultsPage"]][["results"]][["event"]][["location"]][["city"]]
eventLngs <- as.double(sk_json[["resultsPage"]][["results"]][["event"]][["location"]][["lng"]])
eventLats <- as.double(sk_json[["resultsPage"]][["results"]][["event"]][["location"]][["lat"]])
# repeat on further pages (if any)
totalPages <- ceiling(sk_json[["resultsPage"]][['totalEntries']] / sk_json[["resultsPage"]][['perPage']])
if (totalPages > 1) {
pageNums <- 2:totalPages
for (pageNum in pageNums) {
sk_query_url <- paste(sk_query_url,"&page=",pageNum,sep="")
sk_json <- fromJSON(sk_query_url)
eventIDs <- append(eventIDs, as.character(sk_json[["resultsPage"]][["results"]][["event"]][["id"]]))
eventDates <- append(eventDates, sk_json[["resultsPage"]][["results"]][["event"]][["start"]][["date"]])
eventCities <- append(eventCities, sk_json[["resultsPage"]][["results"]][["event"]][["location"]][["city"]])
eventLngs <- append(eventLngs, as.double(sk_json[["resultsPage"]][["results"]][["event"]][["location"]][["lng"]]))
eventLats <- append(eventLats, as.double(sk_json[["resultsPage"]][["results"]][["event"]][["location"]][["lat"]]))
}
}
return (cbind(sk_artist_id, eventIDs, eventDates, eventCities, eventLngs, eventLats))
}
top_20_artists_event_data <- lapply(as.character(top_20$'Songkick ID'), songkick_artist_id_to_event_data)
View(top_20_artists_event_data)
this <- matrix(unlist(top_20_artists_event_data), ncol=5)
this <- matrix(unlist(top_20_artists_event_data), ncol=6)
View(this)
this <- data.frame(matrix(unlist(top_20_artists_event_data), ncol=6))
View(this)
sk_artist_id <- artist_name_to_songkick_id("The Beatles")
# Build query URL and execute
sk_api_key <- "OdCeFTr8qFUSwUVt"
sk_query_url <- paste("https://api.songkick.com/api/3.0/artists/", sk_artist_id,
"/gigography.json?apikey=", sk_api_key, sep="")
sk_json <- fromJSON(sk_query_url)
View(sk_json)
View(sk_json)
View(this)
colnames(this) <- c("Artist ID")
View(this)
write.csv(top_20_artists_event_data_df, "R/artist_events.csv")
top_20_artists_event_data_df <- data.frame(matrix(unlist(top_20_artists_event_data), ncol=6))
colnames(top_20_artists_event_data_df) <- c("Artist ID", "Event ID", "Event Date", "Event City", "Event Longitude", "Event Latitude")
write.csv(top_20_artists_event_data_df, "R/artist_events.csv")
