top_20$Songkick[7]
top_20$Songkick[8]
is.na(top_20$Songkick[8])
is.null(top_20$Songkick[8])
apply(top_20$Artist, 1, artist_name_to_songkick_id)
# lapply to get songkick IDs (RUN FUNCTIONS IN functions.R)
songkick_ids <- sapply(top_20$Artist, artist_name_to_songkick_id)
View(songkick_ids)
# lapply to get songkick IDs (RUN FUNCTIONS IN functions.R)
songkick_ids <- sapply(top_20$Artist, artist_name_to_songkick_id)
View(songkick_ids)
# lapply to get songkick IDs (RUN FUNCTIONS IN functions.R)
songkick_ids <- sapply(top_20$Artist, artist_name_to_songkick_id, simplify=TRUE)
View(songkick_ids)
# lapply to get songkick IDs (RUN FUNCTIONS IN functions.R)
songkick_ids <- Vapply(top_20$Artist, artist_name_to_songkick_id, simplify=TRUE)
# lapply to get songkick IDs (RUN FUNCTIONS IN functions.R)
songkick_ids <- vapply(top_20$Artist, artist_name_to_songkick_id, simplify=TRUE)
View(songkick_ids)
# build url for musicbrainz api query with artist search
json_url_for_mb_gid <- URLencode(paste('http://musicbrainz.org/ws/js/artist?limit=1&q=',"Eminem",sep=""))
library(jsonlite)
# build url for musicbrainz api query with artist search
json_url_for_mb_gid <- URLencode(paste('http://musicbrainz.org/ws/js/artist?limit=1&q=',"Eminem",sep=""))
# execute musicbrainz api query
json1 <- head(fromJSON(json_url_for_mb_gid),1)
# retrieve gid from musicbrainz data
json_url_for_links <- paste('http://musicbrainz.org/ws/2/artist/', json1$gid, '?inc=url-rels', sep="")
# execute second musicbrainz api query
json2 <- fromJSON(json_url_for_links)
# extract URLs
youtube_url <- json2$relations$url$resource[json2$relations$type=='youtube']
official_url <- json2$relations$url$resource[json2$relations$type=='official homepage']
songkick_url <- json2$relations$url$resource[json2$relations$type=='songkick']
# build url for musicbrainz api query with artist search
json_url_for_mb_gid <- URLencode(paste('http://musicbrainz.org/ws/js/artist?limit=1&q=',"SOME BAND THAT DOESNT EXIST",sep=""))
# execute musicbrainz api query
json1 <- head(fromJSON(json_url_for_mb_gid),1)
# retrieve gid from musicbrainz data
json_url_for_links <- paste('http://musicbrainz.org/ws/2/artist/', json1$gid, '?inc=url-rels', sep="")
# execute second musicbrainz api query
json2 <- fromJSON(json_url_for_links)
# extract URLs
youtube_url <- json2$relations$url$resource[json2$relations$type=='youtube']
official_url <- json2$relations$url$resource[json2$relations$type=='official homepage']
songkick_url <- json2$relations$url$resource[json2$relations$type=='songkick']
is.null(songkick_url)
View(top_20)
# build url for musicbrainz api query with artist search
json_url_for_mb_gid <- URLencode(paste('http://musicbrainz.org/ws/js/artist?limit=1&q=',"Travis Scott",sep=""))
# execute musicbrainz api query
json1 <- head(fromJSON(json_url_for_mb_gid),1)
# retrieve gid from musicbrainz data
json_url_for_links <- paste('http://musicbrainz.org/ws/2/artist/', json1$gid, '?inc=url-rels', sep="")
# execute second musicbrainz api query
json2 <- fromJSON(json_url_for_links)
# extract URLs
youtube_url <- json2$relations$url$resource[json2$relations$type=='youtube']
official_url <- json2$relations$url$resource[json2$relations$type=='official homepage']
songkick_url <- json2$relations$url$resource[json2$relations$type=='songkick']
is.null(songkick_url)
typeof(songkick_url)
songkick_url
# build url for musicbrainz api query with artist search
json_url_for_mb_gid <- URLencode(paste('http://musicbrainz.org/ws/js/artist?limit=1&q=',"Eminem",sep=""))
# execute musicbrainz api query
json1 <- head(fromJSON(json_url_for_mb_gid),1)
# execute second musicbrainz api query
json2 <- fromJSON(json_url_for_links)
# extract URLs
youtube_url <- json2$relations$url$resource[json2$relations$type=='youtube']
official_url <- json2$relations$url$resource[json2$relations$type=='official homepage']
# retrieve gid from musicbrainz data
json_url_for_links <- paste('http://musicbrainz.org/ws/2/artist/', json1$gid, '?inc=url-rels', sep="")
is.null(songkick_url)
typeof(songkick_url)
songkick_url <- json2$relations$url$resource[json2$relations$type=='songkick']
songkick_url
# execute musicbrainz api query
json1 <- head(fromJSON(json_url_for_mb_gid),1)
# retrieve gid from musicbrainz data
json_url_for_links <- paste('http://musicbrainz.org/ws/2/artist/', json1$gid, '?inc=url-rels', sep="")
# execute second musicbrainz api query
json2 <- fromJSON(json_url_for_links)
# extract URLs
youtube_url <- json2$relations$url$resource[json2$relations$type=='youtube']
official_url <- json2$relations$url$resource[json2$relations$type=='official homepage']
songkick_url <- json2$relations$url$resource[json2$relations$type=='songkick']
is.null(songkick_url)
typeof(songkick_url)
songkick_url
# build url for musicbrainz api query with artist search
json_url_for_mb_gid <- URLencode(paste('http://musicbrainz.org/ws/js/artist?limit=1&q=',"Travis Scott",sep=""))
# execute musicbrainz api query
json1 <- head(fromJSON(json_url_for_mb_gid),1)
# retrieve gid from musicbrainz data
json_url_for_links <- paste('http://musicbrainz.org/ws/2/artist/', json1$gid, '?inc=url-rels', sep="")
# execute second musicbrainz api query
json2 <- fromJSON(json_url_for_links)
# extract URLs
youtube_url <- json2$relations$url$resource[json2$relations$type=='youtube']
official_url <- json2$relations$url$resource[json2$relations$type=='official homepage']
songkick_url <- json2$relations$url$resource[json2$relations$type=='songkick']
is.null(songkick_url)
typeof(songkick_url)
songkick_url
songkick_url = "character(0)"
songkick_url == "character(0)"
songkick_url <- json2$relations$url$resource[json2$relations$type=='songkick']
is.null(songkick_url)
typeof(songkick_url)
songkick_url
songkick_url == "character(0)"
typeof(songkick_url)
len(songkick_url)
length(songkick_url)
artist_name_to_songkick_id <- function(artist_name){
mb_gid <- artist_name_to_musicbrainz_gid(artist_name)
mb_gid
if (is.null(mb_gid)) {
return("musicbrainz gid not found")
} else {
result <- musicbrainz_gid_to_songkick_id(mb_gid)
}
# Pause to avoid 503 error
Sys.sleep(0.5)
result
if (length(result) < 1) {
return("songkick id not found")
} else {
return(result)
}
}
artist_name_to_musicbrainz_gid <- function(artist_name) {
library(jsonlite)
# build url for musicbrainz api query with artist search
json_url_for_mb_gid <- URLencode(paste('http://musicbrainz.org/ws/js/artist?limit=1&q=',artist_name,sep=""))
# execute musicbrainz api query
json1 <- head(fromJSON(json_url_for_mb_gid),1)
# retrieve gid from musicbrainz data
return(json1$gid)
}
musicbrainz_gid_to_songkick_id <- function(musicbrainz_gid) {
library(jsonlite)
# building url for further musicbrainz api query to include 'relationship' URLs
json_url_for_links <- paste('http://musicbrainz.org/ws/2/artist/', musicbrainz_gid, '?inc=url-rels', sep="")
# execute second musicbrainz api query
json2 <- fromJSON(json_url_for_links)
# extract URLs
youtube_url <- json2$relations$url$resource[json2$relations$type=='youtube']
official_url <- json2$relations$url$resource[json2$relations$type=='official homepage']
songkick_url <- json2$relations$url$resource[json2$relations$type=='songkick']
# extract songkick ID from songkick URL
return(basename(songkick_url))
}
artist_name_to_songkick_id <- function(artist_name){
mb_gid <- artist_name_to_musicbrainz_gid(artist_name)
mb_gid
if (is.null(mb_gid)) {
return("musicbrainz gid not found")
} else {
result <- musicbrainz_gid_to_songkick_id(mb_gid)
}
# Pause to avoid 503 error
Sys.sleep(0.5)
result
if (length(result) < 1) {
return("songkick id not found")
} else {
return(result)
}
}
artist_name_to_musicbrainz_gid <- function(artist_name) {
library(jsonlite)
# build url for musicbrainz api query with artist search
json_url_for_mb_gid <- URLencode(paste('http://musicbrainz.org/ws/js/artist?limit=1&q=',artist_name,sep=""))
# execute musicbrainz api query
json1 <- head(fromJSON(json_url_for_mb_gid),1)
# retrieve gid from musicbrainz data
return(json1$gid)
}
musicbrainz_gid_to_songkick_id <- function(musicbrainz_gid) {
library(jsonlite)
# building url for further musicbrainz api query to include 'relationship' URLs
json_url_for_links <- paste('http://musicbrainz.org/ws/2/artist/', musicbrainz_gid, '?inc=url-rels', sep="")
# execute second musicbrainz api query
json2 <- fromJSON(json_url_for_links)
# extract URLs
youtube_url <- json2$relations$url$resource[json2$relations$type=='youtube']
official_url <- json2$relations$url$resource[json2$relations$type=='official homepage']
songkick_url <- json2$relations$url$resource[json2$relations$type=='songkick']
# extract songkick ID from songkick URL
return(basename(songkick_url))
}
# import spotify dataset
spotify <- read.csv("Excel/spotify.csv", as.is = !stringsAsFactors)
# isolate last 6 months (last 26 weeks of 200 chart positions)
spotify_last6mo <- tail(spotify, 26*200)
# import spotify dataset
spotify <- read.csv("Excel/spotify.csv")
# isolate last 6 months (last 26 weeks of 200 chart positions)
spotify_last6mo <- tail(spotify, 26*200)
# aggregate total plays per artists
artist_plays <- aggregate(spotify_last6mo$Plays, by=list(Artist=spotify_last6mo$Artist), FUN=sum)
# sort list and keep top 20
top_20 <- head(artist_plays[order(artist_plays$x, decreasing=TRUE),], 20)
rownames(top_20) <- 1:20
colnames(top_20) <- c("Artist","Plays last 6mo")
# lapply to get songkick IDs (RUN FUNCTIONS IN functions.R)
songkick_ids <- vapply(top_20$Artist, artist_name_to_songkick_id, simplify=TRUE)
# lapply to get songkick IDs (RUN FUNCTIONS IN functions.R)
songkick_ids <- sapply(top_20$Artist, artist_name_to_songkick_id)
top_20$Songkick <- songkick_ids
View(top_20)
write.csv(top_20, "R/artist_data.csv")
artist_name_to_songkick_id <- function(artist_name){
mb_gid <- artist_name_to_musicbrainz_gid(artist_name)
mb_gid
if (is.null(mb_gid)) {
return("musicbrainz gid not found")
} else {
result <- musicbrainz_gid_to_songkick_id(mb_gid)
}
# Pause to avoid 503 error
Sys.sleep(0.5)
result
if (length(result) < 1) {
return(NULL)
} else {
return(result)
}
}
# lapply to get songkick IDs (RUN FUNCTIONS IN functions.R)
songkick_ids <- sapply(top_20$Artist, artist_name_to_songkick_id)
View(songkick_ids)
# lapply to get songkick IDs (RUN FUNCTIONS IN functions.R)
songkick_ids <- sapply(top_20$Artist, artist_name_to_songkick_id)
View(songkick_ids)
artist_name_to_songkick_id <- function(artist_name){
mb_gid <- artist_name_to_musicbrainz_gid(artist_name)
mb_gid
if (is.null(mb_gid)) {
return("musicbrainz gid not found")
} else {
result <- musicbrainz_gid_to_songkick_id(mb_gid)
}
# Pause to avoid 503 error
Sys.sleep(0.5)
result
if (length(result) < 1) {
return("NULL")
} else {
return(result)
}
}
artist_name_to_musicbrainz_gid <- function(artist_name) {
library(jsonlite)
# build url for musicbrainz api query with artist search
json_url_for_mb_gid <- URLencode(paste('http://musicbrainz.org/ws/js/artist?limit=1&q=',artist_name,sep=""))
# execute musicbrainz api query
json1 <- head(fromJSON(json_url_for_mb_gid),1)
# retrieve gid from musicbrainz data
return(json1$gid)
}
musicbrainz_gid_to_songkick_id <- function(musicbrainz_gid) {
library(jsonlite)
# building url for further musicbrainz api query to include 'relationship' URLs
json_url_for_links <- paste('http://musicbrainz.org/ws/2/artist/', musicbrainz_gid, '?inc=url-rels', sep="")
# execute second musicbrainz api query
json2 <- fromJSON(json_url_for_links)
# extract URLs
youtube_url <- json2$relations$url$resource[json2$relations$type=='youtube']
official_url <- json2$relations$url$resource[json2$relations$type=='official homepage']
songkick_url <- json2$relations$url$resource[json2$relations$type=='songkick']
# extract songkick ID from songkick URL
return(basename(songkick_url))
}
# lapply to get songkick IDs (RUN FUNCTIONS IN functions.R)
songkick_ids <- sapply(top_20$Artist, artist_name_to_songkick_id)
top_20$Songkick <- songkick_ids
write.csv(top_20, "R/artist_data.csv")
# trying songkick query (results need decoding...)
songkick_api_key <- "OdCeFTr8qFUSwUVt"
songkick_artist_id <- artist_name_to_songkick_id("Eminem")
songkick_query_url <- paste ("https://api.songkick.com/api/3.0/artists/",
songkick_artist_id, "/gigography.json?apikey=", songkick_api_key, sep="")
library(jsonlite)
songkick_results <- fromJSON(songkick_query_url)
View(songkick_results)
songkick_query_url
songkick_results[["resultsPage"]]
length(songkick_results[["resultsPage"]])
numPages <- length(songkick_results[["resultsPage"]])
numPages
numPages * 2
songkick_query_url2 <- paste(songkick_query_url,"&page=2",sep="")
songkick_results2 <- fromJSON(songkick_query_url2)
View(songkick_results2)
songkick_query_url2 <- paste(songkick_query_url,"&perPage=100&page=2",sep="")
songkick_results2 <- fromJSON(songkick_query_url2)
View(songkick_results2)
gigIDs <- songkick_results[["resultsPage"]][["results"]][["event"]][["venue"]][["id"]]
gigIDs
songkick_results <- fromJSON(songkick_query_url)
songkick_query_url <- paste ("https://api.songkick.com/api/3.0/artists/",
songkick_artist_id, "/gigography.json?apikey=", songkick_api_key, sep="")
library(jsonlite)
songkick_results <- fromJSON(songkick_query_url)
gigIDs <- songkick_results[["resultsPage"]][["results"]][["event"]][["venue"]][["id"]]
numPages <- length(songkick_results[["resultsPage"]])
songkick_query_url2 <- paste(songkick_query_url,"&page=2",sep="")
songkick_results2 <- fromJSON(songkick_query_url2)
gigIDs <- rbind(gigIDs, songkick_results2[["resultsPage"]][["results"]][["event"]][["venue"]][["id"]])
View(gigIDs)
gigIDs <- songkick_results[["resultsPage"]][["results"]][["event"]][["venue"]][["id"]]
numPages <- length(songkick_results[["resultsPage"]])
songkick_query_url2 <- paste(songkick_query_url,"&page=2",sep="")
songkick_results2 <- fromJSON(songkick_query_url2)
gigIDs <- cbind(gigIDs, songkick_results2[["resultsPage"]][["results"]][["event"]][["venue"]][["id"]])
View(gigIDs)
gigIDs <- songkick_results[["resultsPage"]][["results"]][["event"]][["venue"]][["id"]]
numPages <- length(songkick_results[["resultsPage"]])
songkick_query_url2 <- paste(songkick_query_url,"&page=2",sep="")
songkick_results2 <- fromJSON(songkick_query_url2)
gigIDs.append(songkick_results2[["resultsPage"]][["results"]][["event"]][["venue"]][["id"]])
gigIDs <- songkick_results[["resultsPage"]][["results"]][["event"]][["venue"]][["id"]]
songkick_query_url <- paste ("https://api.songkick.com/api/3.0/artists/",
songkick_artist_id, "/gigography.json?apikey=", songkick_api_key, sep="")
library(jsonlite)
songkick_results <- fromJSON(songkick_query_url)
gigIDs <- songkick_results[["resultsPage"]][["results"]][["event"]][["venue"]][["id"]]
numPages <- length(songkick_results[["resultsPage"]])
songkick_query_url2 <- paste(songkick_query_url,"&page=2",sep="")
songkick_results2 <- fromJSON(songkick_query_url2)
list.append(gigIDs, songkick_results2[["resultsPage"]][["results"]][["event"]][["venue"]][["id"]])
append(gigIDs, songkick_results2[["resultsPage"]][["results"]][["event"]][["venue"]][["id"]])
gigIDs <- append(gigIDs, songkick_results2[["resultsPage"]][["results"]][["event"]][["venue"]][["id"]])
pages <- 1:numPages
pages
songkick_artist_id <- artist_name_to_songkick_id("Eminem")
#songkick_artist_id_to_songkick_event_ids <- function(songkick_artist_id) {
library(jsonlite)
songkick_api_key <- "OdCeFTr8qFUSwUVt"
songkick_query_url <- paste ("https://api.songkick.com/api/3.0/artists/",
songkick_artist_id, "/gigography.json?apikey=", songkick_api_key, sep="")
songkick_results <- fromJSON(songkick_query_url)
gigIDs <- songkick_results[["resultsPage"]][["results"]][["event"]][["venue"]][["id"]]
numPages <- length(songkick_results[["resultsPage"]])
pages <- 1:numPages
pages <- 2:numPages
songkick_api_key <- "OdCeFTr8qFUSwUVt"
songkick_query_url <- paste ("https://api.songkick.com/api/3.0/artists/",
songkick_artist_id, "/gigography.json?apikey=", songkick_api_key, sep="")
songkick_results <- fromJSON(songkick_query_url)
gigIDs <- songkick_results[["resultsPage"]][["results"]][["event"]][["venue"]][["id"]]
numPages <- length(songkick_results[["resultsPage"]])
if (numPages > 1) {
pages <- 2:numPages
for (pagenum in pages) {
songkick_query_url <- paste(songkick_query_url,"&page=",pagenum,sep="")
songkick_results <- fromJSON(songkick_query_url)
gigIDs <- append(gigIDs, songkick_results[["resultsPage"]][["results"]][["event"]][["venue"]][["id"]])
}
}
songkick_artist_id_to_songkick_event_ids <- function(songkick_artist_id) {
library(jsonlite)
songkick_api_key <- "OdCeFTr8qFUSwUVt"
songkick_query_url <- paste ("https://api.songkick.com/api/3.0/artists/",
songkick_artist_id, "/gigography.json?apikey=", songkick_api_key, sep="")
songkick_results <- fromJSON(songkick_query_url)
gigIDs <- songkick_results[["resultsPage"]][["results"]][["event"]][["venue"]][["id"]]
numPages <- length(songkick_results[["resultsPage"]])
if (numPages > 1) {
pages <- 2:numPages
for (pagenum in pages) {
songkick_query_url <- paste(songkick_query_url,"&page=",pagenum,sep="")
songkick_results <- fromJSON(songkick_query_url)
gigIDs <- append(gigIDs, songkick_results[["resultsPage"]][["results"]][["event"]][["venue"]][["id"]])
}
}
}
songkick_artist_id_to_songkick_event_ids(artist_name_to_songkick_id("Eminem"))
eminemGigs <- songkick_artist_id_to_songkick_event_ids(artist_name_to_songkick_id("Eminem"))
songkick_artist_id <- artist_name_to_songkick_id("Eminem")
eminemGigs <- songkick_artist_id_to_songkick_event_ids(songkick_artist_id)
eminemGigs <- songkick_artist_id_to_songkick_event_ids(songkick_artist_id)
songkick_artist_id_to_songkick_event_ids <- function(songkick_artist_id) {
library(jsonlite)
songkick_api_key <- "OdCeFTr8qFUSwUVt"
songkick_query_url <- paste ("https://api.songkick.com/api/3.0/artists/",
songkick_artist_id, "/gigography.json?apikey=", songkick_api_key, sep="")
songkick_results <- fromJSON(songkick_query_url)
gigIDs <- songkick_results[["resultsPage"]][["results"]][["event"]][["venue"]][["id"]]
numPages <- length(songkick_results[["resultsPage"]])
if (numPages > 1) {
pages <- 2:numPages
for (pagenum in pages) {
songkick_query_url <- paste(songkick_query_url,"&page=",pagenum,sep="")
songkick_results <- fromJSON(songkick_query_url)
gigIDs <- append(gigIDs, songkick_results[["resultsPage"]][["results"]][["event"]][["venue"]][["id"]])
}
}
}
eminemGigs <- songkick_artist_id_to_songkick_event_ids(songkick_artist_id)
#songkick_artist_id_to_songkick_event_ids <- function(songkick_artist_id) {
library(jsonlite)
songkick_api_key <- "OdCeFTr8qFUSwUVt"
songkick_query_url <- paste ("https://api.songkick.com/api/3.0/artists/",
songkick_artist_id, "/gigography.json?apikey=", songkick_api_key, sep="")
songkick_results <- fromJSON(songkick_query_url)
gigIDs <- songkick_results[["resultsPage"]][["results"]][["event"]][["venue"]][["id"]]
numPages <- length(songkick_results[["resultsPage"]])
if (numPages > 1) {
pages <- 2:numPages
for (pagenum in pages) {
songkick_query_url <- paste(songkick_query_url,"&page=",pagenum,sep="")
songkick_results <- fromJSON(songkick_query_url)
gigIDs <- append(gigIDs, songkick_results[["resultsPage"]][["results"]][["event"]][["venue"]][["id"]])
}
}
#songkick_artist_id_to_songkick_event_ids <- function(songkick_artist_id) {
library(jsonlite)
artist_name_to_songkick_id <- function(artist_name){
mb_gid <- artist_name_to_musicbrainz_gid(artist_name)
mb_gid
if (is.null(mb_gid)) {
return("musicbrainz gid not found")
} else {
result <- musicbrainz_gid_to_songkick_id(mb_gid)
}
# Pause to avoid 503 error
Sys.sleep(0.5)
result
if (length(result) < 1) {
return("NULL")
} else {
return(result)
}
}
artist_name_to_musicbrainz_gid <- function(artist_name) {
library(jsonlite)
# build url for musicbrainz api query with artist search
json_url_for_mb_gid <- URLencode(paste('http://musicbrainz.org/ws/js/artist?limit=1&q=',artist_name,sep=""))
# execute musicbrainz api query
json1 <- head(fromJSON(json_url_for_mb_gid),1)
# retrieve gid from musicbrainz data
return(json1$gid)
}
musicbrainz_gid_to_songkick_id <- function(musicbrainz_gid) {
library(jsonlite)
# building url for further musicbrainz api query to include 'relationship' URLs
json_url_for_links <- paste('http://musicbrainz.org/ws/2/artist/', musicbrainz_gid, '?inc=url-rels', sep="")
# execute second musicbrainz api query
json2 <- fromJSON(json_url_for_links)
# extract URLs
youtube_url <- json2$relations$url$resource[json2$relations$type=='youtube']
official_url <- json2$relations$url$resource[json2$relations$type=='official homepage']
songkick_url <- json2$relations$url$resource[json2$relations$type=='songkick']
# extract songkick ID from songkick URL
return(basename(songkick_url))
}
songkick_artist_id <- artist_name_to_songkick_id("Eminem")
songkick_api_key <- "OdCeFTr8qFUSwUVt"
songkick_query_url <- paste ("https://api.songkick.com/api/3.0/artists/",
songkick_artist_id, "/gigography.json?apikey=", songkick_api_key, sep="")
songkick_results <- fromJSON(songkick_query_url)
gigIDs <- songkick_results[["resultsPage"]][["results"]][["event"]][["venue"]][["id"]]
numPages <- length(songkick_results[["resultsPage"]])
songkick_artist_id_to_songkick_event_ids <- function(songkick_artist_id) {
library(jsonlite)
songkick_api_key <- "OdCeFTr8qFUSwUVt"
songkick_query_url <- paste ("https://api.songkick.com/api/3.0/artists/",
songkick_artist_id, "/gigography.json?apikey=", songkick_api_key, sep="")
songkick_results <- fromJSON(songkick_query_url)
gigIDs <- songkick_results[["resultsPage"]][["results"]][["event"]][["venue"]][["id"]]
numPages <- length(songkick_results[["resultsPage"]])
if (numPages > 1) {
pages <- 2:numPages
for (pagenum in pages) {
songkick_query_url <- paste(songkick_query_url,"&page=",pagenum,sep="")
songkick_results <- fromJSON(songkick_query_url)
gigIDs <- append(gigIDs, songkick_results[["resultsPage"]][["results"]][["event"]][["venue"]][["id"]])
}
}
return (gigIDs)
}
songkick_artist_id <- artist_name_to_songkick_id("Eminem")
eminemGigs <- songkick_artist_id_to_songkick_event_ids(songkick_artist_id)
songkick_artist_id_to_songkick_event_ids <- function(songkick_artist_id) {
library(jsonlite)
songkick_api_key <- "OdCeFTr8qFUSwUVt"
songkick_query_url <- paste ("https://api.songkick.com/api/3.0/artists/",
songkick_artist_id, "/gigography.json?apikey=", songkick_api_key, sep="")
songkick_results <- fromJSON(songkick_query_url)
eventIDs <- songkick_results[["resultsPage"]][["results"]][["event"]][["venue"]][["id"]]
totalPages <- length(songkick_results[["resultsPage"]])
if (totalPages > 1) {
pageNums <- 2:totalPages
for (pageNum in pageNums) {
songkick_query_url <- paste(songkick_query_url,"&page=",pageNum,sep="")
songkick_results <- fromJSON(songkick_query_url)
eventIDs <- append(eventIDs, songkick_results[["resultsPage"]][["results"]][["event"]][["venue"]][["id"]])
}
}
return (eventIDs)
}
songkick_artist_id <- artist_name_to_songkick_id("Eminem")
eminemGigs <- songkick_artist_id_to_songkick_event_ids(songkick_artist_id)
songkick_artist_id <- artist_name_to_songkick_id("Eminem")
eminemGigs <- songkick_artist_id_to_songkick_event_ids(songkick_artist_id)
eminemEventIDs <- songkick_artist_id_to_songkick_event_ids(songkick_artist_id)
eminemEventIDs <- songkick_artist_id_to_songkick_event_ids(artist_name_to_songkick_id("Eminem"))
